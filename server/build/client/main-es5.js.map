{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.module.ts","webpack:///src/app/components/app.component.ts","webpack:///src/app/components/app.component.html","webpack:///src/app/components/game-canvas/game-canvas.component.ts","webpack:///src/app/components/game-canvas/game-canvas.component.html","webpack:///src/app/components/level-editor/level-editor.component.ts","webpack:///src/app/components/level-editor/level-editor.component.html","webpack:///src/app/core/blocks.ts","webpack:///src/app/core/constants.ts","webpack:///src/app/core/factions.ts","webpack:///src/app/core/mapGrid.ts","webpack:///src/app/gameplay/controllers/playerController.ts","webpack:///src/app/gameplay/controllers/walkerController.ts","webpack:///src/app/gameplay/entities/characterEntity.ts","webpack:///src/app/gameplay/entities/humanoidEntity.ts","webpack:///src/app/gameplay/items/armor.ts","webpack:///src/app/gameplay/items/equipmentItem.ts","webpack:///src/app/modules/app-routing.module.ts","webpack:///src/app/modules/materials.module.ts","webpack:///src/app/scenes/levelEditor.ts","webpack:///src/app/scenes/levelScene.ts","webpack:///src/app/services/asset.service.ts","webpack:///src/app/services/entity-spawner.service.ts","webpack:///src/app/services/input.service.ts","webpack:///src/app/services/level-loader.service.ts","webpack:///src/app/ui/entityHeader.ts","webpack:///src/app/ui/healthBarPlayer.ts","webpack:///src/app/ui/healthBarSmall.ts","webpack:///src/app/ui/ui.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppModule","declarations","imports","providers","bootstrap","AppComponent","selector","templateUrl","styleUrls","GameCanvasComponent","inputService","levelLoader","ngZone","level","config","type","AUTO","height","Screen","SCREEN_H","width","SCREEN_W","scene","parent","physics","dom","createContainer","runOutsideAngular","phaserGame","Game","console","log","exportLevel","levelJson","prompt","importlevel","onExportLevel","onImportLevel","LevelEditorComponent","Phaser","disableContextMenu","BlockType","Blocks","Map","Background","texture","Foreground","BlockIds","Array","from","Level","GRID_SIZE_X","GRID_SIZE_Y","CHUNK_W","CHUNK_H","Character","MAX_SPEED_MULT","COLLIDER_W","COLLIDER_H","COLLIDER_OFFSET_X","COLLIDER_OFFSET_Y","Constants","Faction","FactionsAreFriendly","fac1","fac2","MapGrid","levelScene","tileSet","chunks","tileMap","make","tilemap","tileWidth","tileHeight","addTilesetImage","collidingBlocks","entries","filter","map","indexOf","pos","block","layer","resolveBlockInfo","blockName","blockData","localizeChunk","chunkPos","tilePos","chunk","ensureChunkExists","putTileAt","x","y","size","lowerCorner","Math","Vector2","add","i","j","addBlock","tile","getTileAt","index","flatMap","getTilesWithin","name","L","row","Object","values","undefined","isNotEmpty","usedLayers","Set","hasOwnProperty","Number","removeTileAt","forEach","destroy","createChunk","createBlankDynamicLayer","setCollision","setDepth","collider","entities","gameObject","get","floor","subtract","multiply","PlayerController","inputKeys","left","isDown","right","up","down","normalize","WalkerController","myself","aggroRadius","unaggroRadius","SQRT2","minRange","target","searchFrequency","searchIncrement","timeSinceLastSearch","pathWaypoints","rushAtTarget","unrushDistanceSq","pow","min","waypointReachedDistanceSq","_DEBUG","targetPos","body","position","distanceSq","buildPathToTarget","length","ZERO","shift","myPos","gridLowerCorner","gridUpperCorner","ceil","max","gridSize","matrix","push","mapGrid","getBlockAt","grid","Grid","finder","AStarFinder","diagonalMovement","IfAtMostOneObstacle","weight","heuristic","Heuristic","euclidean","path","pathStart","round","pathFinish","findPath","_drawDebug","debugGraphics","Util","compressPath","point","myNumber","closest","faction","targetEntity","find","gfx","clear","p","cell","color","fillStyle","fillRect","searched","searchTarget","moveVector","calculateMovement","CharacterEntity","cfg","Player","destroyed$","entityName","bodyTexture","maxHealth","health","speed","refreshRenderSprite","move","dmg","next","complete","maxSpeedMult","movement","controller","scale","velocity","lengthSq","lookRight","setAcceleration","condition","setFlipX","bounds","center","draw","asObservable","HumanoidEntity","armor","weapon","equipArmor","Armor","description","price","mass","EquipmentItem","routes","component","AppRoutingModule","forRoot","MaterialsModule","LevelEditor","cursorActive","entitySpawner","init","getInputKeys","input","keyboard","player","spawnPlayer","cameras","main","startFollow","on","update","gridPos","snap","worldView","centerX","centerY","setPosition","worldPoint","activePointer","positionToCamera","placePosition","manager","leftButtonDown","rightButtonDown","value","snapSize","key","levelUI","stalker","spawnStalker","subscribe","damage","backgroundImage","tileSprite","sys","game","canvas","graphics","setAlpha","events","postupdate","bind","HealthBarPlayer","loadBlockSprites","load","loadEntitySprites","loadArmorSprites","setTilePosition","ui","AssetService","loader","image","providedIn","EntitySpawnerService","playerName","createRenderTexture","textures","getFrame","setSize","setOffset","entity","destroyed","entityIndex","splice","Baddies","healthBar","HealthBarSmall","nameLabel","EntityHeader","healthBarIndex","labelIndex","sprite","setupPhysics","renderTexture","existing","getAllChunks","checkCollision","useDamping","setDrag","InputService","inputs","addKey","LevelLoaderService","minLevel","l","getUsedLayers","getAllOfLayer","b","JSON","stringify","parse","alwaysVisible","setHTML","elementHTML","getChildByID","levelLabel","innerText","toString","updateSize","depth","setVisible","setInteractive","pipe","time","delta","getTopCenter","GameObjects","DOMElement","setScrollFactor","plr","bar","style","label","getBottomCenter","visible","UI","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './modules/app-routing.module';\r\nimport { AppComponent } from './components/app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MaterialsModule } from './modules/materials.module';\r\nimport { GameCanvasComponent } from './components/game-canvas/game-canvas.component';\r\nimport { LevelEditorComponent } from './components/level-editor/level-editor.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GameCanvasComponent,\r\n    LevelEditorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialsModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n","<div class='root-box'>\r\n  <div class='game-title'>\r\n    Generic RPG\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","import { Component, OnInit, NgZone } from '@angular/core';\r\nimport Phaser from 'phaser';\r\nimport { InputService } from 'src/app/services/input.service';\r\nimport { Level } from 'src/app/scenes/levelScene';\r\nimport { LevelLoaderService } from 'src/app/services/level-loader.service';\r\nimport { Constants } from 'src/app/core/constants';\r\n\r\n@Component({\r\n  selector: 'app-game-canvas',\r\n  templateUrl: './game-canvas.component.html',\r\n  styleUrls: ['./game-canvas.component.scss']\r\n})\r\nexport class GameCanvasComponent implements OnInit {\r\n  phaserGame: Phaser.Game;\r\n  config: Phaser.Types.Core.GameConfig;\r\n  level: Level;\r\n\r\n  constructor(\r\n    private inputService: InputService,\r\n    private levelLoader: LevelLoaderService,\r\n    private ngZone: NgZone\r\n  ) {\r\n    this.level = new Level(inputService, levelLoader);\r\n\r\n    this.config = {\r\n      type: Phaser.AUTO,\r\n      height: Constants.Screen.SCREEN_H,\r\n      width: Constants.Screen.SCREEN_W,\r\n      scene: [ this.level ],\r\n      parent: 'gameContainer',\r\n      physics: {\r\n        default: 'arcade'\r\n      },\r\n      dom: {\r\n        createContainer: true\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.phaserGame = new Phaser.Game(this.config);\r\n    });\r\n  }\r\n\r\n  onExportLevel() {\r\n    console.log(this.levelLoader.exportLevel(this.level));\r\n  }\r\n\r\n  onImportLevel() {\r\n    const levelJson = prompt('Paste level JSON');\r\n\r\n    if (!levelJson) { return; }\r\n\r\n    this.levelLoader.importlevel(levelJson, this.level);\r\n  }\r\n}\r\n","<div class='root'>\r\n  <div id='gameContainer'></div>\r\n\r\n  <button mat-raised-button (click)=\"onExportLevel()\">Export level</button>\r\n  <button mat-raised-button (click)=\"onImportLevel()\">Import level</button>\r\n</div>\r\n\r\n","import { Component, OnInit, NgZone } from '@angular/core';\r\nimport { Level } from 'src/app/scenes/levelScene';\r\nimport { InputService } from 'src/app/services/input.service';\r\nimport { LevelLoaderService } from 'src/app/services/level-loader.service';\r\nimport { Constants } from 'src/app/core/constants';\r\nimport { LevelEditor } from 'src/app/scenes/levelEditor';\r\n\r\n@Component({\r\n  selector: 'app-level-editor',\r\n  templateUrl: './level-editor.component.html',\r\n  styleUrls: ['./level-editor.component.scss']\r\n})\r\nexport class LevelEditorComponent implements OnInit {\r\n  phaserGame: Phaser.Game;\r\n  config: Phaser.Types.Core.GameConfig;\r\n  level: Level;\r\n\r\n  constructor(\r\n    private inputService: InputService,\r\n    private levelLoader: LevelLoaderService,\r\n    private ngZone: NgZone\r\n  ) {\r\n    this.level = new LevelEditor(inputService, levelLoader);\r\n\r\n    this.config = {\r\n      type: Phaser.AUTO,\r\n      height: Constants.Screen.SCREEN_H,\r\n      width: Constants.Screen.SCREEN_W,\r\n      scene: [ this.level ],\r\n      parent: 'gameContainer',\r\n      physics: {\r\n        default: 'arcade'\r\n      },\r\n      disableContextMenu: true\r\n    };\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.phaserGame = new Phaser.Game(this.config);\r\n    });\r\n  }\r\n\r\n  onExportLevel() {\r\n    console.log(this.levelLoader.exportLevel(this.level));\r\n  }\r\n\r\n  onImportLevel() {\r\n    const levelJson = prompt('Paste level JSON');\r\n\r\n    if (!levelJson) { return; }\r\n\r\n    this.levelLoader.importlevel(levelJson, this.level);\r\n  }\r\n}\r\n","<div class='root'>\r\n  <div id='gameContainer'></div>\r\n\r\n  <button mat-raised-button (click)=\"onExportLevel()\">Export level</button>\r\n  <button mat-raised-button (click)=\"onImportLevel()\">Import level</button>\r\n</div>\r\n\r\n","export enum BlockType {\r\n  Background,\r\n  Foreground\r\n}\r\n\r\nexport interface BlockInfo {\r\n  type: BlockType;\r\n  texture: string;\r\n  z_index?: number;\r\n}\r\n\r\nexport const Blocks = new Map<string, BlockInfo>([\r\n  ['grass', {type: BlockType.Background, texture: 'grass01'}],\r\n  ['stone_floor', {type: BlockType.Background, texture: 'stone_floor01'}],\r\n  ['stone_bricks', {type: BlockType.Foreground, texture: 'stone_wall01'}],\r\n]) as ReadonlyMap<string, BlockInfo>;\r\n\r\nexport const BlockIds = Array.from(Blocks.keys());\r\n","class Screen {\r\n  static readonly SCREEN_W = 800;\r\n  static readonly SCREEN_H = 608;\r\n}\r\n\r\nclass Level {\r\n  static readonly GRID_SIZE_X = 32;\r\n  static readonly GRID_SIZE_Y = 32;\r\n  static readonly CHUNK_W = 32; // in tiles\r\n  static readonly CHUNK_H = 32; // in tiles\r\n}\r\n\r\nclass Character {\r\n  static readonly MAX_SPEED_MULT = 5;\r\n  static readonly COLLIDER_W = 20;\r\n  static readonly COLLIDER_H = 20;\r\n  static readonly COLLIDER_OFFSET_X = 1;\r\n  static readonly COLLIDER_OFFSET_Y = 7;\r\n}\r\n\r\nexport const Constants = {\r\n  Screen,\r\n  Level,\r\n  Character\r\n};\r\n","export enum Faction {\r\n  Player,\r\n  Baddies\r\n}\r\n\r\nexport function FactionsAreFriendly(fac1: Faction, fac2: Faction): boolean {\r\n  if (fac1 === fac2) { return true; }\r\n\r\n  return false;\r\n}\r\n","import { Tilemaps } from 'phaser';\r\nimport { BlockInfo, Blocks, BlockIds, BlockType } from './blocks';\r\nimport { LevelSerialization } from '../models/levelSerialization.model';\r\nimport { Constants } from './constants';\r\nimport { Level } from '../scenes/levelScene';\r\n\r\nexport class MapGrid {\r\n  private tileMap: Tilemaps.Tilemap;\r\n  private chunks: Tilemaps.DynamicTilemapLayer[][][] = [];\r\n  private collidingBlocks: number[];\r\n\r\n  constructor(private levelScene: Level, private tileSet: string) {\r\n    this.tileMap = levelScene.make.tilemap({\r\n      width: Constants.Level.CHUNK_W,\r\n      height: Constants.Level.CHUNK_H,\r\n      tileWidth: Constants.Level.GRID_SIZE_X,\r\n      tileHeight: Constants.Level.GRID_SIZE_Y\r\n    });\r\n\r\n    this.tileMap.addTilesetImage(tileSet, tileSet,\r\n      Constants.Level.GRID_SIZE_X,\r\n      Constants.Level.GRID_SIZE_Y,\r\n      1, 2);\r\n\r\n    this.collidingBlocks = Array.from(Blocks.entries())\r\n      .filter(e => e[1].type === BlockType.Foreground)\r\n      .map(e => BlockIds.indexOf(e[0]));\r\n  }\r\n\r\n  public addBlock(pos: Phaser.Math.Vector2, block: string | BlockInfo, layer = 0) {\r\n    const { blockName, blockData } = this.resolveBlockInfo(block);\r\n\r\n    const { chunkPos, tilePos } = this.localizeChunk(pos);\r\n\r\n    // const chunkPos = new Phaser.Math.Vector2(\r\n    //   Math.floor(pos.x / Constants.Level.CHUNK_W),\r\n    //   Math.floor(pos.y / Constants.Level.CHUNK_H)\r\n    // );\r\n\r\n    const chunk = this.ensureChunkExists(chunkPos, layer);\r\n\r\n    // const tilePosInChunk = new Phaser.Math.Vector2(pos)\r\n    //   .subtract(new Phaser.Math.Vector2(chunkPos)\r\n    //     .multiply(new Phaser.Math.Vector2(\r\n    //       Constants.Level.CHUNK_W,\r\n    //       Constants.Level.CHUNK_H\r\n    //     ))\r\n    //   );\r\n\r\n    chunk.putTileAt(\r\n      BlockIds.indexOf(blockName),\r\n      tilePos.x,\r\n      tilePos.y\r\n    );\r\n  }\r\n\r\n  public fillArea(pos: Phaser.Math.Vector2, size: Phaser.Math.Vector2, block: string | BlockInfo, layer = 0) {\r\n    const lowerCorner = new Phaser.Math.Vector2(pos).add(size);\r\n    for (let i = pos.x; i <= lowerCorner.x; ++i) {\r\n      for (let j = pos.y; j <= lowerCorner.y; ++j) {\r\n        this.addBlock(new Phaser.Math.Vector2(i, j), block, layer);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getBlockAt(pos: Phaser.Math.Vector2, layer = 0): string {\r\n    // TODO: rewrite this and the rest to return indices instead in order to optimize level exports\r\n    const { chunkPos, tilePos } = this.localizeChunk(pos);\r\n    if (!this.chunks[layer] ||\r\n      !this.chunks[layer][chunkPos.x] ||\r\n      !this.chunks[layer][chunkPos.x][chunkPos.y]) {\r\n      return null;\r\n    }\r\n    const tile = this.chunks[layer][chunkPos.x][chunkPos.y].getTileAt(tilePos.x, tilePos.y);\r\n    if (!tile) { return null; }\r\n    return BlockIds[tile.index];\r\n  }\r\n\r\n  public getAll(): LevelSerialization.Block[] {\r\n    return this.chunks.flatMap(x =>\r\n      x.flatMap(y =>\r\n        y.flatMap(chunk =>\r\n          chunk.getTilesWithin().map(tile => {\r\n            return {\r\n              name: BlockIds[tile.index],\r\n              x: tile.x + chunk.x / Constants.Level.GRID_SIZE_X,\r\n              y: tile.y + chunk.y / Constants.Level.GRID_SIZE_Y\r\n            } as LevelSerialization.Block;\r\n          })\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  public getAllChunks(layer?: number): Tilemaps.DynamicTilemapLayer[] {\r\n    if (!layer) {\r\n      return this.chunks.flatMap(L =>\r\n        L.flatMap(row => row));\r\n    }\r\n    return this.chunks[layer].flatMap(row => row);\r\n  }\r\n\r\n  public getAllOfLayer(layer: number): LevelSerialization.Block[] {\r\n    return Object.values(this.chunks[layer]).flatMap(row => {\r\n      return Object.values(row).flatMap(chunk => {\r\n        return chunk.getTilesWithin(0, 0, undefined, undefined, { isNotEmpty: true }).map(tile => {\r\n          return {\r\n            name: BlockIds[tile.index],\r\n            x: tile.x + chunk.x / Constants.Level.GRID_SIZE_X,\r\n            y: tile.y + chunk.y / Constants.Level.GRID_SIZE_Y\r\n          } as LevelSerialization.Block;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public getUsedLayers(): number[] {\r\n    const usedLayers = new Set<number>();\r\n\r\n    for (const layer in this.chunks) {\r\n      if (this.chunks.hasOwnProperty(layer)) {\r\n        usedLayers.add(Number(layer));\r\n      }\r\n    }\r\n\r\n    return Array.from(usedLayers);\r\n  }\r\n\r\n  public removeBlockAt(pos: Phaser.Math.Vector2, layer = 0) {\r\n    const { chunkPos, tilePos } = this.localizeChunk(pos);\r\n    const chunk = this.chunks[layer][chunkPos.x][chunkPos.y].removeTileAt(tilePos.x, tilePos.y);\r\n  }\r\n\r\n  public clearGrid() {\r\n    this.chunks.forEach(layer => layer.forEach(row => row.forEach(chunk => chunk.destroy())));\r\n\r\n    this.chunks = [];\r\n  }\r\n\r\n  private ensureChunkExists(chunkPos: Phaser.Math.Vector2, layer = 0): Tilemaps.DynamicTilemapLayer {\r\n    if (!this.chunks[layer]) {\r\n      this.chunks[layer] = [];\r\n    }\r\n\r\n    if (!this.chunks[layer][chunkPos.x]) {\r\n      this.chunks[layer][chunkPos.x] = [];\r\n    }\r\n\r\n    if (!this.chunks[layer][chunkPos.x][chunkPos.y]) {\r\n      return this.createChunk(chunkPos, layer);\r\n    }\r\n\r\n    return this.chunks[layer][chunkPos.x][chunkPos.y];\r\n  }\r\n\r\n  private createChunk(chunkPos: Phaser.Math.Vector2, layer = 0): Tilemaps.DynamicTilemapLayer {\r\n    const chunk = this.tileMap.createBlankDynamicLayer(\r\n      `chunk_${layer}_${chunkPos.x}_${chunkPos.y}`,\r\n      this.tileSet,\r\n      chunkPos.x * Constants.Level.GRID_SIZE_X * Constants.Level.CHUNK_W,\r\n      chunkPos.y * Constants.Level.GRID_SIZE_Y * Constants.Level.CHUNK_H\r\n    );\r\n\r\n    chunk.setCollision(this.collidingBlocks);\r\n    chunk.setDepth(layer);\r\n\r\n    this.levelScene.physics.add.collider(this.levelScene.entities.map(e => e.gameObject), chunk);\r\n\r\n    this.chunks[layer][chunkPos.x][chunkPos.y] = chunk;\r\n\r\n    return chunk;\r\n  }\r\n\r\n  private resolveBlockInfo(block: string | BlockInfo): { blockName: string, blockData: BlockInfo } {\r\n    let blockName: string = null;\r\n    let blockData: BlockInfo;\r\n\r\n    if (typeof block === 'string') {\r\n      blockName = block;\r\n      blockData = Blocks.get(blockName);\r\n    } else {\r\n      blockName = 'custom';\r\n      blockData = block;\r\n    }\r\n\r\n    return { blockName, blockData };\r\n  }\r\n\r\n  private localizeChunk(pos: Phaser.Math.Vector2): { chunkPos: Phaser.Math.Vector2, tilePos: Phaser.Math.Vector2 } {\r\n    const chunkPos = new Phaser.Math.Vector2(\r\n      Math.floor(pos.x / Constants.Level.CHUNK_W),\r\n      Math.floor(pos.y / Constants.Level.CHUNK_H)\r\n    );\r\n\r\n    const tilePos = new Phaser.Math.Vector2(pos)\r\n      .subtract(new Phaser.Math.Vector2(chunkPos)\r\n      .multiply(new Phaser.Math.Vector2(\r\n        Constants.Level.CHUNK_W,\r\n        Constants.Level.CHUNK_H\r\n      ))\r\n    );\r\n\r\n    return { chunkPos, tilePos };\r\n  }\r\n}\r\n","import { Controller } from './baseController';\r\nimport { InputKeys } from 'src/app/models/inputKeys.model';\r\n\r\nexport class PlayerController implements Controller {\r\n  constructor(private inputKeys: InputKeys) {}\r\n\r\n  get movement(): Phaser.Math.Vector2 {\r\n    return new Phaser.Math.Vector2(\r\n      -this.inputKeys.left.isDown || +this.inputKeys.right.isDown,\r\n      -this.inputKeys.up.isDown || +this.inputKeys.down.isDown).normalize();\r\n  }\r\n\r\n  get attack(): Phaser.Math.Vector2 {\r\n    return null;\r\n  }\r\n}\r\n","import { Controller } from './baseController';\r\nimport { Level } from 'src/app/scenes/levelScene';\r\nimport { CharacterEntity } from '../entities/characterEntity';\r\nimport { FactionsAreFriendly } from 'src/app/core/factions';\r\nimport { Entity } from '../entities/baseEntity';\r\nimport PF, { DiagonalMovement } from 'pathfinding';\r\nimport { Constants } from 'src/app/core/constants';\r\nimport { GameObjects } from 'phaser';\r\n\r\nexport class WalkerController implements Controller {\r\n  private target: Entity = null;\r\n\r\n  private readonly searchFrequency = 250; // ms\r\n  private readonly searchIncrement = 16.67;\r\n  private timeSinceLastSearch = 0;\r\n\r\n  private pathWaypoints: Phaser.Math.Vector2[] = null;\r\n  private rushAtTarget = false;\r\n  private readonly unrushDistanceSq = Math.pow(Math.min(Constants.Level.GRID_SIZE_Y, Constants.Level.GRID_SIZE_X) * 2, 2);\r\n\r\n  private readonly waypointReachedDistanceSq = Math.pow(\r\n    Math.min(Constants.Level.GRID_SIZE_X, Constants.Level.GRID_SIZE_Y) * 0.7,\r\n  2);\r\n\r\n  private _DEBUG = false;\r\n\r\n  constructor(\r\n    private myself: CharacterEntity,\r\n    private levelScene: Level,\r\n    public aggroRadius: number = 256,\r\n    public unaggroRadius: number = aggroRadius * Math.SQRT2,\r\n    public minRange: number = 64\r\n  ) {}\r\n\r\n  get movement(): Phaser.Math.Vector2 {\r\n\r\n    if (!this.target || !this.target.gameObject || !this.target.gameObject.body) {\r\n      const searched = this.searchTarget();\r\n\r\n      if (!searched) {\r\n        return Phaser.Math.Vector2.ZERO;\r\n      } else {\r\n        this.target = searched;\r\n      }\r\n    }\r\n\r\n    const distanceSq = this.myself.gameObject.body.position.distanceSq(this.target.gameObject.body.position);\r\n\r\n    if (distanceSq > this.unaggroRadius * this.unaggroRadius) {\r\n      this.target = null;\r\n      return Phaser.Math.Vector2.ZERO;\r\n    } else if (distanceSq < this.minRange) {\r\n      return Phaser.Math.Vector2.ZERO;\r\n    }\r\n\r\n    const moveVector = this.calculateMovement(this.target.gameObject.body.position);\r\n\r\n    return moveVector;\r\n  }\r\n\r\n  get attack(): Phaser.Math.Vector2 {\r\n    return null;\r\n  }\r\n\r\n  private calculateMovement(targetPos: Phaser.Math.Vector2): Phaser.Math.Vector2 {\r\n    if (this.myself.gameObject.body.position.distanceSq(targetPos) > this.unrushDistanceSq) {\r\n      this.rushAtTarget = false;\r\n    }\r\n\r\n    if (this.rushAtTarget) {\r\n      return new Phaser.Math.Vector2(targetPos)\r\n        .subtract(this.myself.gameObject.body.position)\r\n        .normalize();\r\n    }\r\n\r\n    this.timeSinceLastSearch += this.searchIncrement;\r\n\r\n    if (!this.pathWaypoints || this.timeSinceLastSearch >= this.searchFrequency) {\r\n      this.pathWaypoints = this.buildPathToTarget(targetPos);\r\n      this.timeSinceLastSearch = 0;\r\n\r\n      if (!this.pathWaypoints) {\r\n        debugger;\r\n      }\r\n    }\r\n\r\n    if (this.pathWaypoints.length === 0) {\r\n      this.rushAtTarget = true;\r\n      return Phaser.Math.Vector2.ZERO;\r\n    } else if (this.pathWaypoints[0].distanceSq(this.myself.gameObject.body.position) < this.waypointReachedDistanceSq) {\r\n      this.pathWaypoints.shift();\r\n\r\n      if (this.pathWaypoints.length === 0) {\r\n        this.rushAtTarget = true;\r\n        return Phaser.Math.Vector2.ZERO;\r\n      }\r\n    }\r\n\r\n    return new Phaser.Math.Vector2(this.pathWaypoints[0])\r\n      .subtract(this.myself.gameObject.body.position)\r\n      .normalize();\r\n  }\r\n\r\n  private buildPathToTarget(targetPos: Phaser.Math.Vector2): Phaser.Math.Vector2[] {\r\n    const myPos = this.myself.gameObject.body.position;\r\n\r\n    const gridLowerCorner = new Phaser.Math.Vector2(\r\n      Math.floor((Math.min(myPos.x, targetPos.x) - this.aggroRadius) / Constants.Level.GRID_SIZE_X),\r\n      Math.floor((Math.min(myPos.y, targetPos.y) - this.aggroRadius) / Constants.Level.GRID_SIZE_Y)\r\n    );\r\n\r\n    const gridUpperCorner = new Phaser.Math.Vector2(\r\n      Math.ceil((Math.max(myPos.x, targetPos.x) + this.aggroRadius) / Constants.Level.GRID_SIZE_X),\r\n      Math.ceil((Math.max(myPos.y, targetPos.y) + this.aggroRadius) / Constants.Level.GRID_SIZE_Y)\r\n    );\r\n\r\n    const gridSize = new Phaser.Math.Vector2(gridUpperCorner).subtract(gridLowerCorner);\r\n\r\n    const matrix: number[][] = [];\r\n\r\n    for (let i = 0; i <= gridSize.y; ++i) {\r\n      matrix.push([]);\r\n\r\n      for (let j = 0; j <= gridSize.x; ++j) {\r\n        matrix[i].push(this.levelScene.mapGrid.getBlockAt(new Phaser.Math.Vector2(\r\n          j + gridLowerCorner.x,\r\n          i + gridLowerCorner.y\r\n        )) ? 1 : 0);\r\n      }\r\n    }\r\n\r\n    const grid = new PF.Grid(matrix);\r\n    const finder = new PF.AStarFinder({\r\n      diagonalMovement: DiagonalMovement.IfAtMostOneObstacle,\r\n      weight: 1,\r\n      heuristic: PF.Heuristic.euclidean\r\n    });\r\n\r\n    let path: number[][];\r\n\r\n    const pathStart = new Phaser.Math.Vector2(\r\n      Math.round(myPos.x / Constants.Level.GRID_SIZE_X) - gridLowerCorner.x,\r\n      Math.round(myPos.y / Constants.Level.GRID_SIZE_Y) - gridLowerCorner.y\r\n    );\r\n    const pathFinish = new Phaser.Math.Vector2(\r\n      Math.round(targetPos.x / Constants.Level.GRID_SIZE_X) - gridLowerCorner.x,\r\n      Math.round(targetPos.y / Constants.Level.GRID_SIZE_Y) - gridLowerCorner.y\r\n    );\r\n\r\n    try {\r\n      path = finder.findPath(\r\n        pathStart.x,\r\n        pathStart.y,\r\n        pathFinish.x,\r\n        pathFinish.y,\r\n        grid\r\n      );\r\n    } catch {\r\n      debugger;\r\n    }\r\n\r\n    if (this._DEBUG) {\r\n      this._drawDebug(this.levelScene.debugGraphics, matrix, path, myPos, targetPos, gridLowerCorner);\r\n    }\r\n\r\n    if (!path) {\r\n      return null;\r\n    }\r\n\r\n    path = PF.Util.compressPath(path);\r\n\r\n    return path.map(point => new Phaser.Math.Vector2(\r\n        (point[0] + gridLowerCorner.x) * Constants.Level.GRID_SIZE_X,\r\n        (point[1] + gridLowerCorner.y) * Constants.Level.GRID_SIZE_Y\r\n    ));\r\n  }\r\n\r\n  private searchTarget(): Entity {\r\n    const myNumber = this.levelScene.entities.indexOf(this.myself);\r\n    if (myNumber < 0) { throw new Error('I am not on the entities list!'); }\r\n\r\n    const target = this.levelScene.physics.closest(\r\n      this.myself.gameObject.body.position,\r\n      this.levelScene.entities\r\n        .filter((e, i) => !FactionsAreFriendly(this.myself.faction, e.faction) &&\r\n          e.gameObject.body.position.distanceSq(this.myself.gameObject.body.position) < this.aggroRadius * this.aggroRadius &&\r\n          (myNumber !== i))\r\n        .map(e => e.gameObject)\r\n    ) as Phaser.GameObjects.GameObject;\r\n\r\n    if (!target) {\r\n      return null;\r\n    }\r\n\r\n    const targetEntity = this.levelScene.entities.find(e => e.gameObject === target);\r\n\r\n    if (!targetEntity) { throw new Error('Entity for closest GameObject not found!'); }\r\n\r\n    return targetEntity;\r\n  }\r\n\r\n  private _drawDebug(\r\n    gfx: GameObjects.Graphics,\r\n    matrix: number[][],\r\n    path: number[][],\r\n    myPos: Phaser.Math.Vector2,\r\n    targetPos: Phaser.Math.Vector2,\r\n    gridLowerCorner: Phaser.Math.Vector2) {\r\n    gfx.clear();\r\n\r\n    path.forEach(p => {\r\n      matrix[p[1]][p[0]] = 4;\r\n    });\r\n\r\n    matrix[Math.round(myPos.y / Constants.Level.GRID_SIZE_Y) - gridLowerCorner.y]\r\n      [Math.round(myPos.x / Constants.Level.GRID_SIZE_X) - gridLowerCorner.x] = 2;\r\n    matrix[Math.round(targetPos.y / Constants.Level.GRID_SIZE_Y) - gridLowerCorner.y]\r\n      [Math.round(targetPos.x / Constants.Level.GRID_SIZE_X) - gridLowerCorner.x] = 3;\r\n\r\n    matrix.forEach((row, i) => {\r\n\r\n      row.forEach((cell, j) => {\r\n        let color: number;\r\n        switch (cell) {\r\n          case 0:\r\n            color = 0x00ff00;\r\n            break;\r\n          case 1:\r\n            color = 0x00ffff;\r\n            break;\r\n          case 2:\r\n            color = 0xff00ff;\r\n            break;\r\n          case 3:\r\n            color = 0xffaa00;\r\n            break;\r\n          case 4:\r\n            color = 0x000000;\r\n            break;\r\n        }\r\n        gfx.fillStyle(color);\r\n        gfx.fillRect(\r\n          (j + gridLowerCorner.x) * Constants.Level.GRID_SIZE_X,\r\n          (i + gridLowerCorner.y) * Constants.Level.GRID_SIZE_Y,\r\n          Constants.Level.GRID_SIZE_X,\r\n          Constants.Level.GRID_SIZE_Y\r\n        );\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Entity, Controllable, Destroyable } from './baseEntity';\r\nimport { GameObjects } from 'phaser';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { Controller } from '../controllers/baseController';\r\nimport { Constants } from 'src/app/core/constants';\r\nimport { Faction } from 'src/app/core/factions';\r\n\r\n\r\nexport class CharacterEntity implements Entity, Controllable, Destroyable {\r\n  public entityName: string;\r\n  public faction: Faction = Faction.Player;\r\n\r\n  public gameObject: GameObjects.RenderTexture & { body: Phaser.Physics.Arcade.Body };\r\n  protected bodyTexture: string;\r\n\r\n  public maxHealth: number;\r\n  public health: number;\r\n  public level: number;\r\n  public speed: number;\r\n\r\n  public controller: Controller;\r\n  protected destroyed$ = new Subject<void>();\r\n\r\n  constructor(cfg: CharacterConfig) {\r\n    this.entityName = cfg.name;\r\n    this.gameObject = cfg.gameObject;\r\n    this.bodyTexture = cfg.bodyTexture;\r\n    this.maxHealth = cfg.maxHealth || 100;\r\n    this.health = this.maxHealth;\r\n    this.level = cfg.level || 1;\r\n    this.speed = cfg.speed || 20;\r\n\r\n    this.refreshRenderSprite();\r\n  }\r\n\r\n  get destroyed(): Observable<void> {\r\n    return this.destroyed$.asObservable();\r\n  }\r\n\r\n  update() {\r\n    this.move();\r\n  }\r\n\r\n  damage(dmg: number): void {\r\n    this.health -= dmg;\r\n\r\n    if (this.health <= 0) {\r\n      this.destroy();\r\n    }\r\n  }\r\n\r\n  destroy(): void {\r\n    this.gameObject.destroy();\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  protected move() {\r\n    const maxSpeedMult = Constants.Character.MAX_SPEED_MULT;\r\n    const movement = this.controller.movement.scale(this.speed * maxSpeedMult * 10);\r\n    if (this.gameObject.body.velocity.lengthSq() > (this.speed * this.speed * maxSpeedMult * maxSpeedMult)) {\r\n      this.gameObject.body.velocity.normalize().scale(this.speed * maxSpeedMult);\r\n    }\r\n    if (movement.x !== 0) {\r\n      this.lookRight(movement.x > 0);\r\n    }\r\n    this.gameObject.body.setAcceleration(movement.x, movement.y);\r\n  }\r\n\r\n  protected lookRight(condition: boolean) {\r\n    this.gameObject.setFlipX(condition);\r\n  }\r\n\r\n  protected refreshRenderSprite() {\r\n    const bounds = this.gameObject.body.center;\r\n\r\n    this.gameObject.clear();\r\n    this.gameObject.draw(\r\n      this.bodyTexture,\r\n      0, 0\r\n    );\r\n  }\r\n}\r\n\r\nexport interface CharacterConfig {\r\n  name: string;\r\n  gameObject: Phaser.GameObjects.RenderTexture & { body: Phaser.Physics.Arcade.Body };\r\n  bodyTexture: string;\r\n  maxHealth?: number;\r\n  level?: number;\r\n  speed?: number;\r\n}\r\n","import { CharacterEntity, CharacterConfig } from './characterEntity';\r\nimport { Armor } from '../items/armor';\r\n\r\nexport class HumanoidEntity extends CharacterEntity {\r\n  private armor: Armor = null;\r\n  private weapon: string = null;\r\n\r\n  constructor(cfg: HumanoidConfig) {\r\n    super(cfg);\r\n\r\n    this.equipArmor(cfg.armor);\r\n    this.weapon = cfg.weapon;\r\n  }\r\n\r\n  public equipArmor(armor: Armor) {\r\n    this.armor = armor;\r\n    console.log('equip called');\r\n\r\n    this.refreshRenderSprite();\r\n  }\r\n\r\n  public update() {\r\n    super.update();\r\n  }\r\n\r\n  protected lookRight(condition: boolean) {\r\n    super.lookRight(condition);\r\n  }\r\n\r\n  protected refreshRenderSprite() {\r\n    super.refreshRenderSprite();\r\n\r\n    if (this.armor) {\r\n      this.gameObject.draw(\r\n        this.armor.texture,\r\n        this.gameObject.width / 2 - 9,\r\n        this.gameObject.height / 2 - 5\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport interface HumanoidConfig extends CharacterConfig {\r\n  armor?: Armor;\r\n  weapon?: string;\r\n}\r\n","import { EquipmentItem } from './equipmentItem';\r\n\r\nexport class Armor extends EquipmentItem {\r\n  public texture: string;\r\n\r\n  constructor(cfg: ArmorConfig) {\r\n    super(\r\n      cfg.name,\r\n      cfg.texture,\r\n      cfg.description || 'No information.',\r\n      cfg.price || 0,\r\n      cfg.mass || 0,\r\n      cfg.level || 1\r\n    );\r\n\r\n    this.texture = cfg.texture;\r\n  }\r\n}\r\n\r\ninterface ArmorConfig {\r\n  name: string;\r\n  texture: string;\r\n  description?: string;\r\n  price?: number;\r\n  mass?: number;\r\n  level?: number;\r\n  armor?: number;\r\n}\r\n","import { Item } from './baseItem';\r\n\r\nexport class EquipmentItem implements Item {\r\n  constructor(\r\n    public name: string,\r\n    public texture: string,\r\n    public description: string,\r\n    public price: number,\r\n    public mass: number,\r\n    public level: number\r\n  ) {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LevelEditorComponent } from '../components/level-editor/level-editor.component';\r\nimport { GameCanvasComponent } from '../components/game-canvas/game-canvas.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'editor',\r\n    component: LevelEditorComponent\r\n  },\r\n  {\r\n    path: '',\r\n    component: GameCanvasComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {NgModule} from '@angular/core';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatNativeDateModule} from '@angular/material/core';\r\n\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    MatStepperModule,\r\n    MatInputModule,\r\n    MatDialogModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatCheckboxModule,\r\n    MatMenuModule,\r\n    MatSnackBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatBadgeModule,\r\n    MatExpansionModule,\r\n    MatRadioModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n  ]\r\n})\r\nexport class MaterialsModule {\r\n}\r\n","import { Level } from './levelScene';\r\nimport { GameObjects } from 'phaser';\r\nimport { EntitySpawnerService } from '../services/entity-spawner.service';\r\nimport { Constants } from '../core/constants';\r\nimport { MapGrid } from '../core/mapGrid';\r\n\r\nexport class LevelEditor extends Level {\r\n  private grid: GameObjects.Grid;\r\n  private cursorActive = true;\r\n\r\n  create() {\r\n    this.entitySpawner = new EntitySpawnerService();\r\n    this.entitySpawner.init(this.inputService.getInputKeys(this.input.keyboard), this);\r\n\r\n    this.mapGrid = new MapGrid(this, 'tileset');\r\n\r\n    this.player = this.entitySpawner.spawnPlayer('Editor', Phaser.Math.Vector2.ZERO, 60);\r\n    this.cameras.main.startFollow(this.player.gameObject, false, 0.1, 0.1);\r\n\r\n    this.grid = this.add.grid(0, 0, 900, 708, 32, 32, 0x000000, 0, 0xffffff, 0.5);\r\n\r\n    this.input.on('gameout', () => {\r\n      this.cursorActive = false;\r\n    });\r\n    this.input.on('gameover', () => {\r\n      this.cursorActive = true;\r\n    });\r\n  }\r\n\r\n  update() {\r\n    this.entities.forEach(e => e.update());\r\n\r\n    const gridPos = new Phaser.Math.Vector2 (\r\n      this.snap(this.cameras.main.worldView.centerX, Constants.Level.GRID_SIZE_X) + 2,\r\n      this.snap(this.cameras.main.worldView.centerY, Constants.Level.GRID_SIZE_Y) + 2\r\n    );\r\n\r\n    this.grid.setPosition(gridPos.x, gridPos.y);\r\n\r\n    // this.input.activePointer.updateWorldPoint(this.cameras.main);\r\n\r\n    if (this.cursorActive) {\r\n\r\n      const worldPoint = this.input.activePointer.positionToCamera(this.cameras.main) as Phaser.Math.Vector2;\r\n\r\n      const placePosition = new Phaser.Math.Vector2(\r\n        Math.floor(worldPoint.x / Constants.Level.GRID_SIZE_X),\r\n        Math.floor(worldPoint.y / Constants.Level.GRID_SIZE_Y)\r\n      );\r\n\r\n      if (this.input.manager.activePointer.leftButtonDown()) {\r\n        if (!this.mapGrid.getBlockAt(placePosition)) {\r\n          this.mapGrid.addBlock(placePosition, 'stone_bricks');\r\n        }\r\n      } else if (this.input.manager.activePointer.rightButtonDown()) {\r\n        if (!this.mapGrid.getBlockAt(placePosition, -1)) {\r\n          this.mapGrid.addBlock(placePosition, 'stone_floor', -1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private snap(value: number, snapSize: number) {\r\n    return value - (value % snapSize);\r\n  }\r\n}\r\n","import { Scene, GameObjects, Tilemaps } from 'phaser';\r\nimport { InputService } from '../services/input.service';\r\nimport { Entity } from '../gameplay/entities/baseEntity';\r\nimport { EntitySpawnerService } from '../services/entity-spawner.service';\r\nimport { CharacterEntity } from '../gameplay/entities/characterEntity';\r\nimport { AssetService } from '../services/asset.service';\r\nimport { MapGrid } from '../core/mapGrid';\r\nimport { LevelLoaderService } from '../services/level-loader.service';\r\nimport { UI } from '../ui/ui';\r\nimport { interval, timer } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { HumanoidEntity } from '../gameplay/entities/humanoidEntity';\r\nimport { Armor } from '../gameplay/items/armor';\r\n\r\nexport class Level extends Scene {\r\n  public mapGrid: MapGrid;\r\n  public entities: Entity[] = [];\r\n  public levelUI: GameObjects.DOMElement[] = [];\r\n  public player: HumanoidEntity;\r\n\r\n  public debugGraphics: GameObjects.Graphics;\r\n\r\n  protected entitySpawner: EntitySpawnerService;\r\n\r\n  protected backgroundImage: GameObjects.TileSprite;\r\n\r\n  constructor(protected inputService: InputService, protected levelLoader: LevelLoaderService) {\r\n    super({ key: 'level' });\r\n  }\r\n\r\n  create() {\r\n    this.entitySpawner = new EntitySpawnerService();\r\n    this.entitySpawner.init(this.inputService.getInputKeys(this.input.keyboard), this);\r\n\r\n    this.mapGrid = new MapGrid(this, 'tileset');\r\n\r\n    this.player = this.entitySpawner.spawnPlayer('maxi', new Phaser.Math.Vector2(-17, -7), 30);\r\n    this.cameras.main.startFollow(this.player.gameObject, false, 0.1, 0.1);\r\n\r\n    const stalker = this.entitySpawner.spawnStalker(new Phaser.Math.Vector2(6, 11), 20);\r\n\r\n    timer(10000)\r\n      .subscribe(() => {\r\n        stalker.equipArmor(new Armor({\r\n          name: 'Leather vest',\r\n          texture: 'leather_vest'\r\n        }));\r\n        stalker.damage(20);\r\n        this.player.damage(20);\r\n      });\r\n\r\n    this.player.equipArmor(new Armor({\r\n      name: 'Leather vest',\r\n      texture: 'leather_vest'\r\n    }));\r\n\r\n    this.backgroundImage = this.add.tileSprite(\r\n      0, 0,\r\n      this.sys.game.canvas.width + 100,\r\n      this.sys.game.canvas.height + 100,\r\n      'grass01'\r\n    );\r\n\r\n    this.backgroundImage.setDepth(-50);\r\n\r\n    this.debugGraphics = this.add.graphics().setDepth(2).setAlpha(0.75);\r\n\r\n    this.events.on('postupdate', this.postupdate.bind(this));\r\n\r\n    this.levelUI.push(new UI.HealthBarPlayer(this));\r\n  }\r\n\r\n  preload() {\r\n    AssetService.loadBlockSprites(this.load);\r\n\r\n    AssetService.loadEntitySprites(this.load);\r\n\r\n    AssetService.loadArmorSprites(this.load);\r\n  }\r\n\r\n  update() {\r\n    this.entities.forEach(e => e.update());\r\n\r\n    this.backgroundImage.setPosition(\r\n      this.cameras.main.worldView.centerX,\r\n      this.cameras.main.worldView.centerY\r\n    );\r\n    this.backgroundImage.setTilePosition(\r\n      this.cameras.main.worldView.centerX,\r\n      this.cameras.main.worldView.centerY\r\n    );\r\n  }\r\n\r\n  postupdate() {\r\n    this.levelUI.forEach(ui => ui.update());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AssetService {\r\n  public static loadBlockSprites(loader: Phaser.Loader.LoaderPlugin): void {\r\n    loader.image('grass01', 'assets/textures/blocks/grass01.png');\r\n    loader.image('stone_wall01', 'assets/textures/blocks/stone_wall01.png');\r\n    loader.image('stone_floor01', 'assets/textures/blocks/stone_floor01.png');\r\n    loader.image('tileset', 'assets/textures/blocks/tileset-extruded.png');\r\n  }\r\n\r\n  public static loadEntitySprites(loader: Phaser.Loader.LoaderPlugin): void {\r\n    loader.image('humanoid', 'assets/textures/entities/humanoid.png');\r\n  }\r\n\r\n  public static loadArmorSprites(loader: Phaser.Loader.LoaderPlugin): void {\r\n    loader.image('leather_vest', 'assets/textures/items/armor/leather_vest.png');\r\n    loader.image('leather_vest_outline', 'assets/textures/items/armor/leather_vest_outline.png');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { InputKeys } from '../models/inputKeys.model';\r\nimport { Level } from '../scenes/levelScene';\r\nimport { CharacterEntity } from '../gameplay/entities/characterEntity';\r\nimport { PlayerController } from '../gameplay/controllers/playerController';\r\nimport { Constants } from '../core/constants';\r\nimport { Faction } from '../core/factions';\r\nimport { WalkerController } from '../gameplay/controllers/walkerController';\r\nimport { UI } from '../ui/ui';\r\nimport { HumanoidEntity } from '../gameplay/entities/humanoidEntity';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EntitySpawnerService {\r\n  private inputKeys: InputKeys;\r\n  private levelScene: Level;\r\n\r\n  public init(inputKeys: InputKeys, levelScene: Level) {\r\n    this.inputKeys = inputKeys;\r\n    this.levelScene = levelScene;\r\n  }\r\n\r\n  public spawnPlayer(playerName: string, position: Phaser.Math.Vector2, speed: number): HumanoidEntity {\r\n    const gameObject = this.createRenderTexture(\r\n      position,\r\n      new Phaser.Math.Vector2(\r\n        this.levelScene.textures.getFrame('humanoid', 0).width,\r\n        this.levelScene.textures.getFrame('humanoid', 0).height\r\n      )\r\n    ).setDepth(6);\r\n\r\n    gameObject.body\r\n      .setSize(Constants.Character.COLLIDER_W, Constants.Character.COLLIDER_H)\r\n      .setOffset(Constants.Character.COLLIDER_OFFSET_X, Constants.Character.COLLIDER_OFFSET_Y);\r\n\r\n    const entity = new HumanoidEntity({\r\n      name: playerName,\r\n      gameObject,\r\n      maxHealth: 100,\r\n      level: 1,\r\n      speed,\r\n      bodyTexture: 'humanoid'\r\n    });\r\n\r\n    entity.controller = new PlayerController(this.inputKeys);\r\n\r\n    entity.destroyed.subscribe(() => {\r\n      const entityIndex = this.levelScene.entities.indexOf(entity);\r\n\r\n      if (entityIndex >= 0) {\r\n        this.levelScene.entities.splice(entityIndex, 1);\r\n      }\r\n\r\n      console.log(this.levelScene.player);\r\n    });\r\n\r\n    this.levelScene.entities.push(entity);\r\n\r\n    return entity;\r\n  }\r\n\r\n  public spawnStalker(position: Phaser.Math.Vector2, speed: number): HumanoidEntity {\r\n    const gameObject = this.createRenderTexture(\r\n      position,\r\n      new Phaser.Math.Vector2(\r\n        this.levelScene.textures.getFrame('humanoid', 0).width,\r\n        this.levelScene.textures.getFrame('humanoid', 0).height\r\n      )\r\n    ).setDepth(3);\r\n\r\n    gameObject.body\r\n      .setSize(Constants.Character.COLLIDER_W, Constants.Character.COLLIDER_H)\r\n      .setOffset(Constants.Character.COLLIDER_OFFSET_X, Constants.Character.COLLIDER_OFFSET_Y);\r\n\r\n    const entity = new HumanoidEntity({\r\n      name: 'Stalker',\r\n      gameObject,\r\n      maxHealth: 100,\r\n      level: 1,\r\n      speed,\r\n      bodyTexture: 'humanoid'\r\n    });\r\n\r\n    entity.faction = Faction.Baddies;\r\n    entity.controller = new WalkerController(entity, this.levelScene, 512);\r\n\r\n    const healthBar = new UI.HealthBarSmall(this.levelScene, entity);\r\n    const nameLabel = new UI.EntityHeader(this.levelScene, entity, false);\r\n\r\n    entity.destroyed.subscribe(() => {\r\n      healthBar.destroy();\r\n      nameLabel.destroy();\r\n\r\n      const healthBarIndex = this.levelScene.levelUI.indexOf(healthBar);\r\n      if (healthBarIndex >= 0) {\r\n        this.levelScene.levelUI.splice(healthBarIndex, 1);\r\n      }\r\n\r\n      const labelIndex = this.levelScene.levelUI.indexOf(nameLabel);\r\n      if (labelIndex >= 0) {\r\n        this.levelScene.levelUI.splice(labelIndex, 1);\r\n      }\r\n\r\n      const entityIndex = this.levelScene.entities.indexOf(entity);\r\n      if (entityIndex >= 0) {\r\n        this.levelScene.entities.splice(entityIndex, 1);\r\n      }\r\n    });\r\n\r\n    this.levelScene.levelUI.push(healthBar);\r\n    this.levelScene.levelUI.push(nameLabel);\r\n    this.levelScene.entities.push(entity);\r\n\r\n    return entity;\r\n  }\r\n\r\n  private createSpriteGameObject(\r\n    position: Phaser.Math.Vector2,\r\n    sprite: string\r\n  ): Phaser.GameObjects.Sprite & { body: Phaser.Physics.Arcade.Body } {\r\n    let gameObject: Phaser.GameObjects.Sprite & { body: Phaser.Physics.Arcade.Body };\r\n\r\n    gameObject = this.levelScene.add.sprite(\r\n      position.x * Constants.Level.GRID_SIZE_X,\r\n      position.y * Constants.Level.GRID_SIZE_Y,\r\n      sprite\r\n    ) as any;\r\n\r\n    return this.setupPhysics(gameObject);\r\n  }\r\n\r\n  private createRenderTexture(\r\n    position: Phaser.Math.Vector2,\r\n    size: Phaser.Math.Vector2\r\n  ): Phaser.GameObjects.RenderTexture & { body: Phaser.Physics.Arcade.Body } {\r\n    let gameObject: Phaser.GameObjects.RenderTexture & { body: Phaser.Physics.Arcade.Body };\r\n\r\n    gameObject = this.levelScene.add.renderTexture(\r\n      position.x * Constants.Level.GRID_SIZE_X,\r\n      position.y * Constants.Level.GRID_SIZE_Y,\r\n      size.x,\r\n      size.y\r\n    ) as any;\r\n\r\n    return this.setupPhysics(gameObject);\r\n  }\r\n\r\n  private setupPhysics<T extends Phaser.GameObjects.GameObject>(\r\n    gameObject: T & { body: Phaser.Physics.Arcade.Body }\r\n  ): T & { body: Phaser.Physics.Arcade.Body } {\r\n    this.levelScene.physics.add.existing(gameObject);\r\n    this.levelScene.physics.add.collider(\r\n      gameObject,\r\n      this.levelScene.mapGrid.getAllChunks()\r\n    );\r\n\r\n    gameObject.body.checkCollision.up = true;\r\n    gameObject.body.checkCollision.down = true;\r\n    gameObject.body.checkCollision.left = true;\r\n    gameObject.body.checkCollision.right = true;\r\n\r\n    gameObject.body.useDamping = true;\r\n    gameObject.body.setDrag(0.85, 0.85);\r\n\r\n    return gameObject;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { InputKeys } from '../models/inputKeys.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InputService {\r\n  private inputs = {\r\n    up: 'W',\r\n    down: 'S',\r\n    left: 'A',\r\n    right: 'D'\r\n  };\r\n\r\n  public getInputKeys(keyboard: Phaser.Input.Keyboard.KeyboardPlugin): InputKeys {\r\n    return {\r\n      up: keyboard.addKey(this.inputs.up),\r\n      down: keyboard.addKey(this.inputs.down),\r\n      left: keyboard.addKey(this.inputs.left),\r\n      right: keyboard.addKey(this.inputs.right),\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Level } from '../scenes/levelScene';\r\nimport { LevelSerialization } from '../models/levelSerialization.model';\r\nimport { BlockIds } from '../core/blocks';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LevelLoaderService {\r\n  public exportLevel(level: Level): string {\r\n    const minLevel: LevelSerialization.MinifiedLevel = {\r\n      l: []\r\n    };\r\n\r\n    for (const layer of level.mapGrid.getUsedLayers()) {\r\n      minLevel.l.push([\r\n        layer,\r\n        level.mapGrid.getAllOfLayer(layer).map(b => [b.x, b.y, BlockIds.indexOf(b.name)])\r\n      ]);\r\n    }\r\n\r\n    return JSON.stringify(minLevel);\r\n  }\r\n\r\n  public importlevel(levelJson: string, level: Level): void {\r\n    const minLevel: LevelSerialization.MinifiedLevel = JSON.parse(levelJson);\r\n\r\n    for (const layer of minLevel.l) {\r\n      for (const block of layer[1]) {\r\n        level.mapGrid.addBlock(new Phaser.Math.Vector2(block[0], block[1]), BlockIds[block[2]], layer[0]);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CharacterEntity } from '../gameplay/entities/characterEntity';\r\nimport { Level } from '../scenes/levelScene';\r\nimport { fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nexport class EntityHeader extends Phaser.GameObjects.DOMElement {\r\n  private static readonly elementHTML = `\r\n    <div style='\r\n      color: white;\r\n      font-size: 14px;\r\n      user-select: none;\r\n      width: fit-content;\r\n    '>\r\n      [<span id='level'></span>] <span id='name'></span>\r\n    </div>\r\n  `;\r\n\r\n  constructor(scene: Level, public target: CharacterEntity, public alwaysVisible = true) {\r\n    super(\r\n      scene,\r\n      target.gameObject.body.position.x,\r\n      target.gameObject.body.position.y,\r\n      'div'\r\n    );\r\n    this.setHTML(EntityHeader.elementHTML);\r\n\r\n    const nameLabel = this.getChildByID('name') as HTMLElement;\r\n    const levelLabel = this.getChildByID('level') as HTMLElement;\r\n\r\n    nameLabel.innerText = target.entityName;\r\n    levelLabel.innerText = target.level.toString();\r\n\r\n    this.updateSize();\r\n    this.setDepth(target.gameObject.depth + 1);\r\n\r\n    scene.add.existing(this);\r\n\r\n    if (!alwaysVisible) {\r\n      this.setVisible(false);\r\n      target.gameObject.setInteractive();\r\n\r\n      fromEvent(target.gameObject, 'pointerover')\r\n        .pipe(takeUntil(target.destroyed))\r\n        .subscribe(() => {\r\n          this.setVisible(true);\r\n        });\r\n      fromEvent(target.gameObject, 'pointerout')\r\n        .pipe(takeUntil(target.destroyed))\r\n        .subscribe(() => {\r\n          this.setVisible(false);\r\n        });\r\n    }\r\n  }\r\n\r\n  update(time: number, delta: number) {\r\n    super.update(time, delta);\r\n    const bounds = this.target.gameObject.getTopCenter();\r\n    this.setPosition(\r\n      bounds.x,\r\n      bounds.y - 12\r\n    );\r\n  }\r\n}\r\n","import { Level } from '../scenes/levelScene';\r\n\r\nexport class HealthBarPlayer extends Phaser.GameObjects.DOMElement {\r\n  private static readonly elementHTML = `\r\n    <div style='\r\n      background-color: #383838;\r\n      border: 2px solid black;\r\n      box-sizing: content-box;\r\n      width: 128px;\r\n      height: 16px;\r\n    '>\r\n      <div id='full' style='\r\n        height: 100%;\r\n        width: 100%;\r\n        display: flex;\r\n        flex-flow: column nowrap;\r\n      '>\r\n        <div style='\r\n          height: 100%;\r\n          width: 100%;\r\n          background-color: red;\r\n        '></div>\r\n        <div style='\r\n          height: 40%;\r\n          background-color: black;\r\n          opacity: 0.3;\r\n          position: absolute;\r\n          bottom: 0;\r\n          right: 0;\r\n          left: 0;\r\n        '></div>\r\n      </div>\r\n      <div id='label' style='\r\n        color: white;\r\n        font-size: 16px;\r\n        position: absolute;\r\n        top: 2px;\r\n        left: 2px;\r\n        right: 2px;\r\n        bottom: 2px;\r\n        display: flex;\r\n        flex-flow: column nowrap;\r\n        justify-content: center;\r\n        align-items: center;\r\n      '>\r\n        100/100\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  constructor(private levelScene: Level) {\r\n    super(\r\n      levelScene,\r\n      70,\r\n      14,\r\n      'div'\r\n    );\r\n    this.setHTML(HealthBarPlayer.elementHTML);\r\n    this.setScrollFactor(0);\r\n\r\n    levelScene.add.existing(this);\r\n  }\r\n\r\n  update(time: number, delta: number) {\r\n    const plr = this.levelScene.player;\r\n\r\n    const bar = this.getChildByID('full') as HTMLElement;\r\n    bar.style.width = `${Math.max(Math.min(100, plr.health / plr.maxHealth * 100), 0)}%`;\r\n\r\n    const label = this.getChildByID('label') as HTMLElement;\r\n    label.innerText = `${plr.health}/${plr.maxHealth}`;\r\n  }\r\n}\r\n","import { Level } from '../scenes/levelScene';\r\nimport { CharacterEntity } from '../gameplay/entities/characterEntity';\r\n\r\nexport class HealthBarSmall extends Phaser.GameObjects.DOMElement {\r\n  private static readonly elementHTML = `\r\n    <div style='\r\n      background-color: red;\r\n      width: 48px;\r\n      height: 2px;\r\n    '>\r\n      <div id='full' style='\r\n        height: 100%;\r\n        width: 100%;\r\n        background-color: lime;\r\n      '>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  constructor(scene: Level, public target: CharacterEntity) {\r\n    super(\r\n      scene,\r\n      target.gameObject.body.position.x,\r\n      target.gameObject.body.position.y,\r\n      'div'\r\n    );\r\n    this.setHTML(HealthBarSmall.elementHTML);\r\n\r\n    this.updateSize();\r\n    this.setDepth(target.gameObject.depth + 1);\r\n\r\n    scene.add.existing(this);\r\n  }\r\n\r\n  update(time: number, delta: number) {\r\n    super.update(time, delta);\r\n    const bounds = this.target.gameObject.getBottomCenter();\r\n    this.setPosition(\r\n      bounds.x,\r\n      bounds.y + 4\r\n    );\r\n\r\n    const bar = this.getChildByID('full') as HTMLElement;\r\n    bar.style.width = `${Math.max(Math.min(100, this.target.health / this.target.maxHealth * 100), 0)}%`;\r\n\r\n    this.visible = this.target.health < this.target.maxHealth;\r\n  }\r\n}\r\n","import { HealthBarPlayer } from './healthBarPlayer';\r\nimport { HealthBarSmall } from './healthBarSmall';\r\nimport { EntityHeader } from './entityHeader';\r\n\r\nexport const UI = {\r\n  HealthBarPlayer,\r\n  HealthBarSmall,\r\n  EntityHeader\r\n};\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}